resources:
  repositories:
  - repository: self
    type: git
    trigger: none #Step 5: Remove the word "none" from line 5 and uncomment line 6
    # - '*'
    batch: True 
    
variables:
- template: 'buildteststage-apiWebApp-variables.yml'

stages:
- stage: BuildTestApi
  condition: always()
  displayName: 'API: Build, Test'
  dependsOn: []
  
  jobs:
  - job: BuildAndRunAPIUnitTests
    displayName: "Build and Test API"

    pool:
      vmImage: ${{ variables.apiBuildVmImage }}
  
    steps:
    - checkout: self
      submodules: true
  
    - task: CmdLine@2
      displayName: 'Dump Environment Variables'
      inputs:
        script: 'printenv'
        
    - task: UseDotNet@2
      displayName: Use .NET 6.0
      inputs:
        packageType: 'sdk'
        version: '6.0.x'    
    
    - task: DotNetCoreCLI@2
      displayName: 'install dotnet format'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'update -g dotnet-format'
    
    - task: CmdLine@2
      displayName: 'Lint dotnet'
      inputs:
        script: '$HOME/.dotnet/tools/dotnet-format --check --verbosity diagnostic ${{ variables.apiSolution }}'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore ${{ variables.apiSolution }}'
      inputs:
        command: 'restore'
        projects: '${{ variables.apiSolution }}'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build ${{ variables.apiSolution }} --configuration ${{ variables.buildConfiguration }}'
      inputs:
        command: 'build'
        projects: '${{ variables.apiSolution }}'
        arguments: '-- configuration ${{ variables.buildConfiguration }}'

    - task: DotNetCoreCLI@2
      displayName: "Run ALL Tests and Collect Code Coverage"
      inputs:
        command: 'test'
        projects: '${{ variables.apiSolutionRoot }}/**/*Tests/*.csproj'
        arguments: '--verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

    - task: DotNetCoreCLI@2
      displayName: 'Install Custom Tool: ReportGenerator Tool'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --tool-path . dotnet-reportgenerator-globaltool'

    - task: CmdLine@2
      displayName: 'Create Reports'
      inputs:
        script: './reportgenerator -reports:${{ variables.apiSolutionRoot }}/**/coverage.cobertura.xml -targetdir:${{ variables.apiSolutionRoot }}/CoverageReport -reporttypes:"HtmlInline_AzurePipelines;Cobertura;Badges" -sourcedir:${{ variables.apiSolutionRoot }}'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish API Code Coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '${{ variables.apiSolutionRoot }}/**/coverage.cobertura.xml'
        reportDirectory: '${{ variables.apiSolutionRoot }}/CoverageReport'

- stage: StageApi 
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/main'))
  displayName: 'API: Stage'
  dependsOn: [BuildTestApi]  
  
  jobs:
  - job: StageAPIUnitTests
    displayName: "Stage API"

    pool:
      vmImage: ${{ variables.apiBuildVmImage }}
  
    steps:
    - checkout: self
      submodules: true
      
    - task: UseDotNet@2
      displayName: Use .NET 6.0
      inputs:
        packageType: 'sdk'
        version: '6.0.x'  
        
    - task: DotNetCoreCLI@2
      displayName: 'Stage API Build Artifacts'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '${{ variables.apiProject }}'
        arguments: '--configuration ${{ variables.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)/api'
        zipAfterPublish: false
        modifyOutputPath: false

    - task: PublishPipelineArtifact@1
      displayName: 'Publish API Artifacts: api-drop'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'api-drop'
        publishLocation: 'pipeline'

    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: ${{ variables.containerRegistryServiceConnection }}
        
    - task: Docker@2
      displayName: Build Docker Image and Push to Registry
      inputs:
        containerRegistry: ${{ variables.containerRegistryServiceConnection }}
        repository: 'referenceApp.Api'
        command: 'buildAndPush'
        Dockerfile: ${{ variables.apiDockerFilePath }}
        tags: |
          latest
          $(Build.BuildId)

- stage: BuildTestWebApp
  condition: always()
  displayName: 'WEBAPP: Build, Test'
  dependsOn: [StageApi]
  
  jobs:
  - job: BuildWebApp
    displayName: "Build, Test Web App"

    pool:
      vmImage: ${{ variables.webappBuildVMImage }}

    steps:
    - checkout: self

    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        yarn install
      displayName: 'Yarn install'
      workingDirectory: '$(System.DefaultWorkingDirectory)/${{ variables.webAppSolutionRoot }}'

    - script: |
        yarn run eslint --fix-dry-run "$(System.DefaultWorkingDirectory)/${{ variables.webAppSolutionRoot }}/src/**"
      displayName: 'Static Code Analysis with ESLINT'
      workingDirectory: '$(System.DefaultWorkingDirectory)/${{ variables.webAppSolutionRoot }}'

    - script: |
        yarn run build:development
      displayName: 'DEVELOPMEMNT Yarn Build'
      workingDirectory: '$(System.DefaultWorkingDirectory)/${{ variables.webAppSolutionRoot }}'
      env:
        CI: true
        REACT_APP_ENV: development

    - script: yarn test ---coverage --watchAll=false --reporters="jest-trx-results-processor"
      displayName: 'Yarn Test and Code Coverage'
      workingDirectory: '$(System.DefaultWorkingDirectory)/${{ variables.webAppSolutionRoot }}'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/test-results.trx'
        
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'yarn'
        publishLocation: 'pipeline'        

- stage: StageWebApp #Make this conditional to only run on Master/Main Branch changes
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/main'))  
  displayName: 'Stage WebApp'
  dependsOn: [BuildTestWebApp]
  
  jobs: 
  - job: StageWebApp 
    displayName: "Stage WebApp"

    pool:
      vmImage: ${{ variables.webappBuildVMImage }}
  
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'yarn'
        targetPath: '$(Pipeline.Workspace)'
    - script: |
        yarn add react-scripts
      displayName: 'Add React Scripts with Yarn'
      workingDirectory: '$(Pipeline.Workspace)/s/${{ variables.webAppSolutionRoot }}'   
  
    - task: CopyFiles@2 
      displayName: Stage DEVELOPMENT Build
      inputs:
        sourceFolder: '$(System.DefaultWorkingDirectory)/${{ variables.webAppBuildDestination }}'
        contents: '**' 
        targetFolder: '$(Build.ArtifactStagingDirectory)/development_build'

    - script: |
        yarn run build:test
      displayName: 'TEST Yarn Build'
      workingDirectory: '$(System.DefaultWorkingDirectory)/${{ variables.webAppSolutionRoot }}' 
      env:
        CI: true
        REACT_APP_ENV: test

    - task: CopyFiles@2
      displayName: Stage TEST Build
      inputs:
        sourceFolder: '$(System.DefaultWorkingDirectory)/${{ variables.webAppBuildDestination }}' # Optional
        contents: '**' 
        targetFolder: '$(Build.ArtifactStagingDirectory)/test_build'

    - script: |
        yarn run build:production
      displayName: 'PRODUCTION Yarn Build'
      workingDirectory: '$(System.DefaultWorkingDirectory)/webapp'
      env:
        CI: true
        REACT_APP_ENV: production

    - task: CopyFiles@2
      displayName: Stage PRODUCTION Build
      inputs:
        sourceFolder: '$(System.DefaultWorkingDirectory)/${{ variables.webAppBuildDestination }}' # Optional
        contents: '**' 
        targetFolder: '$(Build.ArtifactStagingDirectory)/production_build'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Web App Artifacts - web-app-drop'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'web-app-drop'
        publishLocation: 'pipeline'
